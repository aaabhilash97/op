syntax = "proto3";
package v1;

option go_package = ".;v1";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info : {title : "Op service";
version : "1.0";
contact : {
name:
  "go-grpc-http-rest-microservice-tutorial project";
url:
  "https://github.com/aaabhilash97/op";
email:
  "medium@amsokol.com";
};
}
;
schemes : HTTP;
consumes : "application/json";
produces : "application/json";
responses : {
key:
  "404";
value : {
description:
  "Returned when the resource does not exist.";
schema : {
json_schema : {
type:
  STRING;
}
}
}
}
}
;

// Task we have to do
message ToDo {
  // Unique integer identifier of the todo task
  int64 id = 1;

  // Title of the task
  string title = 2;

  // Detail description of the todo task
  string description = 3;

  // Date and time to remind the todo task
  google.protobuf.Timestamp reminder = 4;
}

// Request data to create new todo task
message CreateRequest {
  // API versioning: it is my best practice to specify version explicitly
  string api = 1;

  // Task entity to add
  ToDo toDo = 2;
}

// Contains data of created todo task
message CreateResponse {
  // API versioning: it is my best practice to specify version explicitly
  string api = 1;

  // ID of created task
  int64 id = 2;
}

// Service to manage list of todo tasks
service ToDoService {

  // Create new todo task
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post : "/v1/todo"
      body : "*"
    };
  }
}
