// Code generated by modelservice/gen/gen.go; DO NOT EDIT.

package db

import (
	"context"
	"time"

	"github.com/aaabhilash97/op/pkg/logger"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.uber.org/zap"
)

// GetCollectionName - get collection name
func (model *UserModel) GetCollectionName() string {
	return model.collection.Name()
}

// SetUpdatedAt - Set updated at
func (model *UserModel) SetUpdatedAt() {
	curTime := time.Now()
	model.UpdatedAt = &curTime
}

// Find - to find
func (model *UserModel) Find(query interface{}, opts ...*options.FindOptions) ([]*UserModel, error) {
	fn := "UserModel-Find"
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	cur, err := model.collection.Find(ctx, query, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}
	defer cur.Close(ctx)
	results := []*UserModel{}
	for cur.Next(ctx) {
		var result UserModel
		err = cur.Decode(&result)
		if err != nil {
			logger.Error(fn, zap.Error(err))
			return nil, ParseError(err)
		}
		results = append(results, &result)
	}
	if err := cur.Err(); err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}
	return results, nil
}

// Find - to find
func (model *UserModel) FindStream(query interface{}, result chan<- struct {
	Val UserModel
	Err error
}, opts ...*options.FindOptions) {
	fn := "UserModel-Find"
	defer close(result)
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	cur, err := model.collection.Find(ctx, query, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		result <- struct {
			Val UserModel
			Err error
		}{
			Err: ParseError(err),
		}
		return
	}
	defer cur.Close(ctx)

	for cur.Next(ctx) {
		var item UserModel
		err = cur.Decode(&item)
		if err != nil {
			logger.Error(fn, zap.Error(err))
			result <- struct {
				Val UserModel
				Err error
			}{
				Err: ParseError(err),
			}
			return
		}
		result <- struct {
			Val UserModel
			Err error
		}{
			Val: item,
		}
	}
	if err = cur.Err(); err != nil {
		logger.Error(fn, zap.Error(err))
		result <- struct {
			Val UserModel
			Err error
		}{
			Err: ParseError(err),
		}
		return
	}
}

func (model *UserModel) Distinct(fieldName string, query interface{}, opts ...*options.DistinctOptions) ([]interface{}, error) {
	fn := "UserModel-Find"
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	entries, err := model.collection.Distinct(ctx, fieldName, query, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return entries, nil
}

// FindOne - to findOne
func (model *UserModel) FindOne(query interface{}, opts ...*options.FindOneOptions) (*UserModel, error) {
	fn := "UserModel-FindOne"
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	result := UserModel{}
	err := model.collection.FindOne(ctx, query, opts...).Decode(&result)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return &result, nil
}

// FindOne - to findOne
func (model *UserModel) FindOneTxn(sc mongo.SessionContext, query interface{}, opts ...*options.FindOneOptions) (*UserModel, error) {
	fn := "UserModel-FindOne"
	result := UserModel{}
	err := model.collection.FindOne(sc, query, opts...).Decode(&result)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return &result, nil
}

// InsertOne -
func (model *UserModel) InsertOne(value UserModel, opts ...*options.InsertOneOptions) (primitive.ObjectID, error) {
	fn := "UserModel-InsertOne"
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	res, err := model.collection.InsertOne(ctx, value, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return primitive.NilObjectID, ParseError(err)
	}
	id := res.InsertedID.(primitive.ObjectID)

	return id, nil
}

// UpdateOne -
func (model *UserModel) UpdateOne(query interface{}, value interface{}, options ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	fn := "UserModel-UpdateOne"

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	res, err := model.collection.UpdateOne(ctx, query, value, options...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return res, nil
}

// UpdateMany -
func (model *UserModel) UpdateMany(query interface{}, value interface{}, options ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	fn := "UserModel-UpdateMany"

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	res, err := model.collection.UpdateMany(ctx, query, value, options...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return res, nil
}

// UpdateManyTxn -
func (model *UserModel) UpdateManyTxn(sc mongo.SessionContext, query interface{}, value interface{}, options ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	fn := "UserModel-UpdateManyTxn"

	res, err := model.collection.UpdateMany(sc, query, value, options...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return res, nil
}

// DeleteOne - to DeleteOne
func (model *UserModel) DeleteOne(filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	fn := "UserModel-DeleteOne"
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	result, err := model.collection.DeleteOne(ctx, filter, opts...)

	if err != nil {
		logger.Error(fn, zap.Any("error", err))
		return nil, ParseError(err)
	}

	return result, nil
}

// DeleteMany -
func (model *UserModel) DeleteMany(filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	fn := "UserModel-DeleteMany"
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	result, err := model.collection.DeleteMany(ctx, filter, opts...)

	if err != nil {
		logger.Error(fn, zap.Any("error", err))
		return nil, ParseError(err)
	}

	return result, nil
}

// DeleteOneTxn - to DeleteOne
func (model *UserModel) DeleteManyTxn(sc mongo.SessionContext, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	fn := "UserModel-DeleteManyTxn"

	result, err := model.collection.DeleteMany(sc, filter, opts...)

	if err != nil {
		logger.Error(fn, zap.Any("error", err))
		return nil, ParseError(err)
	}

	return result, nil
}

// Aggregate - mongodb aggregate
func (model *UserModel) Aggregate(pipeline interface{}, opts ...*options.AggregateOptions) ([]UserModel, error) {
	fn := "UserModel-Aggregate"
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	cur, err := model.collection.Aggregate(ctx, pipeline, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}
	defer cur.Close(ctx)
	results := []UserModel{}
	for cur.Next(ctx) {
		var result UserModel
		err = cur.Decode(&result)
		if err != nil {
			logger.Error(fn, zap.Error(err))
			return nil, ParseError(err)
		}
		results = append(results, result)
	}
	if err := cur.Err(); err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}
	return results, nil
}

// Aggregate - mongodb aggregate
func (model *UserModel) AggregateStream(pipeline interface{}, resultChan chan<- struct {
	Val UserModel
	Err error
}, opts ...*options.AggregateOptions) {
	fn := "UserModel-Aggregate"
	defer close(resultChan)
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	cur, err := model.collection.Aggregate(ctx, pipeline, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		resultChan <- struct {
			Val UserModel
			Err error
		}{
			Err: ParseError(err),
		}
		return
	}
	defer cur.Close(ctx)

	for cur.Next(ctx) {
		var item UserModel
		err = cur.Decode(&item)
		if err != nil {
			logger.Error(fn, zap.Error(err))
			resultChan <- struct {
				Val UserModel
				Err error
			}{
				Err: ParseError(err),
			}
			return
		}
		resultChan <- struct {
			Val UserModel
			Err error
		}{
			Val: item,
		}
	}
	if err = cur.Err(); err != nil {
		logger.Error(fn, zap.Error(err))
		resultChan <- struct {
			Val UserModel
			Err error
		}{
			Err: ParseError(err),
		}
		return
	}
}

// InsertOneTxn -
func (model *UserModel) InsertOneTxn(sc mongo.SessionContext, value UserModel, opts ...*options.InsertOneOptions) (primitive.ObjectID, error) {
	fn := "UserModel-InsertOneTxn"

	res, err := model.collection.InsertOne(sc, value, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return primitive.NilObjectID, ParseError(err)
	}
	id := res.InsertedID.(primitive.ObjectID)

	return id, nil
}

// UpdateOneTxn -
func (model *UserModel) UpdateOneTxn(sc mongo.SessionContext, query interface{}, value interface{}, options ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	fn := "UserModel-UpdateOneTxn"

	res, err := model.collection.UpdateOne(sc, query, value, options...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return res, nil
}

// DeleteOneTxn - to DeleteOne
func (model *UserModel) DeleteOneTxn(sc mongo.SessionContext, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	fn := "UserModel-DeleteOneTxn"

	result, err := model.collection.DeleteOne(sc, filter, opts...)

	if err != nil {
		logger.Error(fn, zap.Any("error", err))
		return nil, ParseError(err)
	}

	return result, nil
}

// FindOneAndUpdateTxn -
func (model *UserModel) FindOneAndUpdateTxn(sc mongo.SessionContext, query interface{}, value interface{}, options ...*options.FindOneAndUpdateOptions) (*UserModel, error) {
	fn := "UserModel-UpdateOneTxn"

	res := model.collection.FindOneAndUpdate(sc, query, value, options...)
	if res == nil {
		logger.Error(fn, zap.String("error", "Empty single result"))

	}
	if err := res.Err(); err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	result := &UserModel{}
	if err := res.Decode(result); err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return result, nil
}

// FindOneAndUpdate -
func (model *UserModel) FindOneAndUpdate(query interface{}, value interface{}, options ...*options.FindOneAndUpdateOptions) (*UserModel, error) {
	fn := "UserModel-UpdateOneTxn"
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	res := model.collection.FindOneAndUpdate(ctx, query, value, options...)
	if res == nil {
		logger.Error(fn, zap.String("error", "Empty single result"))
	}
	if err := res.Err(); err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	result := &UserModel{}
	if err := res.Decode(result); err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}

	return result, nil
}

func (model *UserModel) BulkWrite(models []mongo.WriteModel, opts ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error) {
	fn := "UserModel-BulkWrite"
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	res, err := model.collection.BulkWrite(ctx, models, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}
	return res, err
}

func (model *UserModel) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	fn := "UserModel-Watch"

	cs, err := model.collection.Watch(ctx, pipeline, opts...)
	if err != nil {
		logger.Error(fn, zap.Error(err))
		return nil, ParseError(err)
	}
	return cs, err
}
